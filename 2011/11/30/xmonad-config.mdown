#TITLE: 我的xmonad配置
#TAGS: haskell xmonad

[github上的配置文件](https://github.com/MaskRay/config/tree/master/home/.xmonad)

`sawfish` 有个很方便的功能 `jump-or-exec`，就是输入一个快捷键，如果对应的程序未运行则运行，否则跳转到对应的窗口。
`xmonad-contrib` 中的 `XMonad.Actions.TopicSpace` 用 `Topic` 划分不同工作区，不同 `Topic` 的工作目录不同。它提供了这样一个功能：当某个工作区没有窗口时则执行指定命令。通过把不同类型程序放到不同工作区，就能模拟 `jump-or-exec`。（`XMonad.Actions.WindowGo` 中也有直接对应 `jump-or-exec` 的 `runOrRaiseNext`，但 `Topic` 的管理方式感觉更加科学。）我用 `C-;` 加 `asdfghjkl;` 中的一个来切换不同工作区。带上 `shift` 则是把当前窗口移动到该工作区。

`XMonad.Hooks.FadeInactive` 中的 `fadeInactiveLogHook` 用来半透明没有获得焦点的窗口。

不同工作区我使用了不同的图标，例如 `firefox` 的图标代表工作区 `web`，当前工作区设置显示为默认图标，其他工作区显示为灰图表，含有 `urgency` 信息的窗口采用橙底的图标。点击图标会调用 `wmctrl` 转到相应工作区。这些图标可以用下面的脚本生成，把 `firefox.png` `xterm.xpm` 之类的文件放在 `~/.xmonad/icons/original/`，下面脚本会生成对应的三种类型的 `.xpm` 图片。

    #!/bin/sh
    DIR=~/.xmonad/icons
    ORIG=$DIR/original
    DEFAULT=$DIR/default
    GRAY=$DIR/gray
    HI=$DIR/highlight
    mkdir $DEFAULT $GRAY $HI
    rm $DEFAULT/*.xpm $GRAY/*.xpm $HI/*.xpm
    for i in $ORIG/*; do
    	f=${i##*/}
    	f=${f%.*}.xpm
    	convert -resize 24x24 $i $DEFAULT/$f
    	convert -resize 24x24 -colorspace Gray $i $GRAY/$f
    	convert -resize 24x24 -background orange -flatten $i $HI/$f
    done

我通过 `XMonad.Hooks.DynamicLog` 来把 `xmonad` 的窗口管理信息输出给 `dzen2`，如窗口标题，工作区布局等。

我用快捷键 `C-' e`、`C-' o` 等来运行常用的程序如 `eix-sync`、`offlineimap`，因为觉得这些程序不值得单独占用工作区，就放到了 `NamedScratchpad` 中，需要时按快捷键呼出（显示为浮动窗口）。

`M-<L>`、`M-S-<L>` 等是用来移动、放大缩小当前窗口的。`C-; <L>` 是把当前窗口往左移动直到碰到其他窗口。
`M-S-i` 调用 `xcalib -i -a` 使显示器反色，`M-S-k` 调用 `xkill` 杀窗口。
`M-y` 跳转到带有 `urgency` 信息的窗口，`M-b` 显示/隐藏 `dzen2` 和 `trayer`，

用 `XMonad.Actions.Search` 来实现搜索功能，`M-/` 加其他键来表示各种搜索方式：`Google`、`Wikipedia` 等。
`xmonad` 会弹出一个窗口要求输入查询字符串，然后调用 `firefox` 来查询。

    {-# LANGUAGE
        TypeSynonymInstances,
        MultiParamTypeClasses,
        DeriveDataTypeable
        #-}

    import Control.Monad
    import Codec.Binary.UTF8.String (encodeString)
    import Data.List
    import qualified Data.Map as M
    import Data.Maybe (isNothing, isJust, catMaybes, fromMaybe)
    import Data.Monoid
    import System.Exit
    import System.IO
    import System.Process
    import System.Posix.Process (executeFile)
    import System.Posix.Types (ProcessID)
    import Text.Regex

    import XMonad
    import qualified XMonad.StackSet as W
    import XMonad.Util.EZConfig
    import XMonad.Util.Loggers
    import XMonad.Util.NamedWindows (getName)
    import XMonad.Util.NamedScratchpad
    import XMonad.Util.Paste
    import XMonad.Util.Run
    import qualified XMonad.Util.Themes as Theme
    import XMonad.Util.WorkspaceCompare

    import XMonad.Prompt
    import qualified XMonad.Prompt.AppLauncher as AL
    import XMonad.Prompt.Input
    import XMonad.Prompt.Man
    import XMonad.Prompt.RunOrRaise
    import XMonad.Prompt.Shell
    import XMonad.Prompt.Window
    import XMonad.Prompt.Workspace

    import XMonad.Actions.CycleWS
    import XMonad.Actions.DynamicWorkspaces
    import XMonad.Actions.FloatKeys
    import XMonad.Actions.FloatSnap
    import XMonad.Actions.GridSelect
    import XMonad.Actions.Navigation2D
    import XMonad.Actions.Search
    import XMonad.Actions.Submap
    import XMonad.Actions.SpawnOn
    import XMonad.Actions.TopicSpace
    import XMonad.Actions.WindowBringer
    import XMonad.Actions.WindowGo
    import XMonad.Actions.WindowMenu
    import XMonad.Actions.WithAll (killAll)

    import XMonad.Hooks.DynamicLog
    import XMonad.Hooks.EwmhDesktops
    import XMonad.Hooks.ManageDocks
    import XMonad.Hooks.ManageHelpers
    import XMonad.Hooks.Place
    import XMonad.Hooks.UrgencyHook

    import XMonad.Layout.Mosaic
    import XMonad.Layout.AutoMaster
    import XMonad.Layout.Grid
    import XMonad.Layout.Master
    import XMonad.Layout.Maximize
    import XMonad.Layout.MultiToggle
    import XMonad.Layout.MultiToggle.Instances
    import XMonad.Layout.Named
    import XMonad.Layout.NoBorders
    import XMonad.Layout.PerWorkspace
    import XMonad.Layout.Reflect
    import XMonad.Layout.Renamed
    import XMonad.Layout.Tabbed
    import XMonad.Layout.WindowNavigation
    import XMonad.Layout.WorkspaceDir
    import qualified XMonad.Layout.Magnifier as Mag

    {-
     - TABBED
     -}

    myTabTheme = (Theme.theme Theme.kavonChristmasTheme)
        { fontName   = "DejaVu Sans Mono:pixelsize=16"
        , decoHeight = 20
        }

    data TABBED = TABBED deriving (Read, Show, Eq, Typeable)
    instance Transformer TABBED Window where
         transform _ x k = k (named "TABBED" (tabbedAlways shrinkText myTabTheme)) (const x)

    {-
     - Navigation2D
     -}

    myNavigation2DConfig = defaultNavigation2DConfig { layoutNavigation   = [("Full", centerNavigation)]
                                                     , unmappedWindowRect = [("Full", singleWindowRect)]
                                                     }

    myLayout = avoidStruts $
        configurableNavigation (navigateColor "#00aa00") $
        mkToggle1 TABBED $
        mkToggle1 NBFULL $
        mkToggle1 REFLECTX $
        mkToggle1 REFLECTY $
        mkToggle1 MIRROR $
        mkToggle1 NOBORDERS $
        smartBorders $
        onWorkspaces ["web","irc"] Full $
        Full ||| mosaic 1.5 [7,5,2] ||| autoMaster 1 (1/20) (Mag.magnifier Grid)

    myManageHook = composeAll $
        [ className =? c --> doShift "web" | c <- ["Firefox"] ] ++
        [ className =? c --> doShift "code" | c <- ["Gvim"] ] ++
        [ className =? c --> doShift "doc" | c <- ["Evince"] ] ++
        [ className =? c --> doShift "net" | c <- ["Wpa_gui"] ] ++
        [ className =? c --> doShift "dict" | c <- ["Goldendict", "Stardict"] ] ++
        [ className =? c --> doShift "media" | c <- ["feh", "Display"] ] ++
        [ className =? c --> doShift "emacs" | c <- ["Emacs"] ] ++
        [ fmap (isPrefixOf "libreoffice" <||> isPrefixOf "LibreOffice") className --> doShift "office" ] ++
        [ myFloats --> doCenterFloat ] ++
        [ manageDocks , namedScratchpadManageHook scratchpads ] ++
        [ className =? c --> ask >>= \w -> liftX (hide w) >> idHook | c <- ["XClipboard"] ]
      where
        myFloats = foldr1 (<||>)
            [ className =? "Firefox" <&&> fmap (/="Navigator") appName
            , className =? "Nautilus" <&&> fmap (not . isSuffixOf " - File Browser") title
            , flip fmap className $ flip elem
                [ "XClock"
                , "Xmessage"
                , "Floating"
                ]
            ]

    myDynamicLog h = dynamicLogWithPP $ defaultPP
      { ppCurrent = ap clickable (wrap "^i(/home/ray/.xmonad/icons/default/" ")" . fromMaybe "application-default-icon.xpm" . flip M.lookup myIcons)
      , ppHidden = ap clickable (wrap "^i(/home/ray/.xmonad/icons/gray/" ")" . fromMaybe "application-default-icon.xpm" . flip M.lookup myIcons)
      , ppUrgent = ap clickable (wrap "^i(/home/ray/.xmonad/icons/highlight/" ")" . fromMaybe "application-default-icon.xpm" . flip M.lookup myIcons)
      , ppSep = dzenColor "#0033FF" "" " | "
      , ppWsSep = ""
      , ppTitle  = dzenColor "green" "" . shorten 45
      , ppLayout = flip (subRegex (mkRegex "ReflectX")) "[|]" .
          flip (subRegex (mkRegex "ReflectY")) "[-]" .
          flip (subRegex (mkRegex "Mirror")) "[+]"
      , ppOrder  = \(ws:l:t:exs) -> [t,l,ws]++exs
      , ppSort   = fmap (namedScratchpadFilterOutWorkspace.) (ppSort byorgeyPP)
      , ppExtras = [ dzenColorL "darkgreen" "" $ date "%H:%M %a %y-%m-%d"
                   , dzenColorL "orange" "" battery
                   ]
      , ppOutput = hPutStrLn h
      }
      where
        clickable w = wrap ("^ca(1,wmctrl -s `wmctrl -d | grep "++w++" | cut -d' ' -f1`)") "^ca()"

    {-
     - Bindings
     -}

    myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
        [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                           >> windows W.shiftMaster))
        , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
        , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                           >> windows W.shiftMaster))
        ]

    myKeys =
        [ ("M-" ++ m ++ [k], f i)
            | (i, k) <- zip myTopicNames "1234567890-="
            , (f, m) <- [ (switchTopic myTopicConfig, "")
                        , (windows . liftM2 (.) W.view W.shift, "S-")
                        ]
        ]
        ++
        [ ("C-; " ++ m ++ [k], f i)
            | (i, k) <- zip myTopicNames "asdfghjkl;'\""
            , (f, m) <- [ (switchTopic myTopicConfig, "")
                        , (windows . liftM2 (.) W.view W.shift, "S-")
                        ]
        ]
        ++
        [("M-" ++ m ++ k, screenWorkspace sc >>= flip whenJust (windows . f))
            | (k, sc) <- zip ["w", "e", "r"] [0..]
            , (f, m) <- [(W.view, ""), (liftM2 (.) W.view W.shift, "S-")]
        ]
        ++
        [ ("M-S-q", io exitFailure)
        , ("M-S-c", kill)
        , ("M-q", spawn "ghc -e ':m +XMonad Control.Monad System.Exit' -e 'flip unless exitFailure =<< recompile False' && xmonad --restart")

        , ("<Print>", spawn "import /tmp/screen.jpg")
        , ("C-<Print>", spawn "import -window root /tmp/screen.jpg")
        , ("M-s", spawnSelected defaultGSConfig ["xterm", "firefox-bin", "emacs --daemon", "desmume", "VisualBoyAdvance "])
        , ("M-S-i", spawn "xcalib -i -a")
        , ("M-S-l", spawn "xscreensaver-command -lock")
        , ("M-S-k", spawn "xkill")
        , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+")
        , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%-")
        , ("<XF86AudioNext>", spawn "mpc seek +10")
        , ("<XF86AudioPrev>", spawn "mpc seek -10")
        , ("<XF86AudioMute>", spawn "amixer set Master mute")
        , ("<XF86AudioPlay>", spawn "mpc toggle")
        , ("<XF86Eject>", spawn "eject")
        , ("M-S-a", sendMessage Taller)
        , ("M-S-z", sendMessage Wider)
        , ("M-f", placeFocused $ withGaps (22, 0, 0, 0) $ smart (0.5,0.5))

        -- window management
        , ("M-n", doTo Next EmptyWS getSortByIndex (windows . liftM2 (.) W.view W.shift))
        , ("M-<Space>", sendMessage NextLayout)
        , ("M-i", sendMessage Shrink)
        , ("M-o", sendMessage Expand)
        , ("M-t", withFocused $ windows . W.sink)
        , ("M-,", sendMessage (IncMasterN 1))
        , ("M-.", sendMessage (IncMasterN (-1)))
        , ("M-b", sendMessage ToggleStruts)
        , ("M-d", bringMenu)
        , ("M-y", focusUrgent)
        , ("M-;", switchLayer)
        , ("M-h", windowGo L True)
        , ("M-j", windowGo D True)
        , ("M-k", windowGo U True)
        , ("M-l", windowGo R True)
        , ("M-S-<L>", withFocused (keysResizeWindow (-30,0) (0,0))) --shrink float at right
        , ("M-S-<R>", withFocused (keysResizeWindow (30,0) (0,0))) --expand float at right
        , ("M-S-<D>", withFocused (keysResizeWindow (0,30) (0,0))) --expand float at bottom
        , ("M-S-<U>", withFocused (keysResizeWindow (0,-30) (0,0))) --shrink float at bottom
        , ("M-C-<L>", withFocused (keysResizeWindow (30,0) (1,0))) --expand float at left
        , ("M-C-<R>", withFocused (keysResizeWindow (-30,0) (1,0))) --shrink float at left
        , ("M-C-<U>", withFocused (keysResizeWindow (0,30) (0,1))) --expand float at top
        , ("M-C-<D>", withFocused (keysResizeWindow (0,-30) (0,1))) --shrink float at top
        , ("M-<L>", withFocused (keysMoveWindow (-30,0)))
        , ("M-<R>", withFocused (keysMoveWindow (30,0)))
        , ("M-<U>", withFocused (keysMoveWindow (0,-30)))
        , ("M-<D>", withFocused (keysMoveWindow (0,30)))
        , ("C-; <L>", withFocused $ snapMove L Nothing)
        , ("C-; <R>", withFocused $ snapMove R Nothing)
        , ("C-; <U>", withFocused $ snapMove U Nothing)
        , ("C-; <D>", withFocused $ snapMove D Nothing)

        -- dynamic workspace
        , ("M-C-n", addWorkspacePrompt myXPConfig)
        , ("M-C-r", removeWorkspace)
        , ("M-C-S-r", killAll >> removeWorkspace)

        -- preferred cui programs
        , ("C-; C-;", pasteChar controlMask ';')
        , ("C-' C-'", pasteChar controlMask '\'')
        , ("C-' g", namedScratchpadAction scratchpads "ghci")
        , ("C-' h", namedScratchpadAction scratchpads "htop")
        , ("C-' m", namedScratchpadAction scratchpads "getmail")
        , ("C-' r", namedScratchpadAction scratchpads "r2e")
        , ("C-' a", namedScratchpadAction scratchpads "alsamixer")
        , ("C-' e", namedScratchpadAction scratchpads "eix-sync")

        , ("M-C-<Space>", sendMessage $ Toggle NBFULL)
        , ("M-C-t", sendMessage $ Toggle TABBED)
        , ("M-C-x", sendMessage $ Toggle REFLECTX)
        , ("M-C-y", sendMessage $ Toggle REFLECTY)
        , ("M-C-m", sendMessage $ Toggle MIRROR)
        , ("M-C-b", sendMessage $ Toggle NOBORDERS)

        -- prompts
        , ("M-'", workspacePrompt myXPConfig (switchTopic myTopicConfig) )
        , ("M-p c", prompt ("xterm -e") myXPConfig)
        , ("M-p d", changeDir myXPConfig)
        , ("M-p p", runOrRaisePrompt myXPConfig)
        , ("M-p e", AL.launchApp myXPConfig "evince")
        , ("M-p f", AL.launchApp myXPConfig "feh")
        , ("M-p M-p", runOrRaisePrompt myXPConfig)
        , ("M-/",   submap . mySearchMap $ myPromptSearch)
        , ("M-C-/", submap . mySearchMap $ mySelectSearch)
        ]

    scratchpads =
      [ NS "ghci" "xterm -T ghci -e ghci" (title =? "ghci") mySPFloat
      , NS "htop" "xterm -T htop -e htop" (title =? "htop") mySPFloat
      , NS "getmail" "xterm -T getmail -e 'getmail -r rc0 -r rc1'" (title =? "getmail") doTopRightFloat
      , NS "r2e" "xterm -T r2e -e 'r2e run'" (title =? "r2e") doBottomRightFloat
      , NS "alsamixer" "xterm -T alsamixer -e alsamixer" (title =? "alsamixer") doLeftFloat
      , NS "eix-sync" "xterm -T eix-sync -e 'screen -m sh -c \"sudo eix-sync; read\"'" (title =? "eix-sync") doTopFloat
      ]
      where
        mySPFloat = customFloating $ W.RationalRect (1/6) (1/6) (4/6) (4/6)
        doTopFloat = customFloating $ W.RationalRect (1/3) 0 (1/3) (1/3)
        doTopLeftFloat = customFloating $ W.RationalRect 0 0 (1/3) (1/3)
        doTopRightFloat = customFloating $ W.RationalRect (2/3) 0 (1/3) (1/3)
        doBottomLeftFloat = customFloating $ W.RationalRect 0 (2/3) (1/3) (1/3)
        doBottomRightFloat = customFloating $ W.RationalRect (2/3) (2/3) (1/3) (1/3)
        doLeftFloat = customFloating $ W.RationalRect 0 0 (1/3) 1

    myConfig xmobar = ewmh $ withNavigation2DConfig myNavigation2DConfig $ withUrgencyHook NoUrgencyHook $ defaultConfig
        { terminal           = "xterm"
        , focusFollowsMouse  = False
        , borderWidth        = 1
        , modMask            = mod4Mask
        , workspaces         = myTopicNames
        , normalBorderColor  = "#dbdbdb"
        , focusedBorderColor = "#3939ff"
        , mouseBindings      = myMouseBindings
        , layoutHook         = myLayout
        , manageHook         = myManageHook
        , handleEventHook    = mempty
        , logHook            = myDynamicLog xmobar
        , startupHook        = checkKeymap (myConfig xmobar) myKeys >> spawn "~/bin/start-tiling"
    } `additionalKeysP` myKeys

    myXPConfig = defaultXPConfig
        { font = "xft:DejaVu Sans Mono:pixelsize=16"
        , bgColor           = "#0c1021"
        , fgColor           = "#f8f8f8"
        , fgHLight          = "#f8f8f8"
        , bgHLight          = "steelblue3"
        , borderColor       = "DarkOrange"
        , promptBorderWidth = 1
        , position          = Top
        , historyFilter     = deleteConsecutive
        }

    -- | Like 'spawn', but uses bash and returns the 'ProcessID' of the launched application
    spawnBash :: MonadIO m => String -> m ProcessID
    spawnBash x = xfork $ executeFile "/bin/bash" False ["-c", encodeString x] Nothing

    main = do
        checkTopicConfig myTopicNames myTopicConfig
        dzen <- spawnPipe "killall dzen2; dzen2 -x 500 -h 22 -ta right -fg '#a8a3f7' -fn 'WenQuanYi Micro Hei-14'"
        -- remind <http://www.roaringpenguin.com/products/remind>
        dzenRem <- spawnBash "rem | tail -n +3 | grep . | { read a; while read t; do b[${#b[@]}]=$t; echo $t; done; { echo $a; for a in \"${b[@]}\"; do echo $a; done; } | dzen2 -p -x 100 -w 400 -h 22 -ta l -fg '#a8a3f7' -fn 'WenQuanYi Micro Hei-14' -l ${#b[@]}; }"
        spawn "killall trayer; trayer --align left --edge top --expand false --width 100 --transparent true --tint 0x000000 --widthtype pixel --SetPartialStrut true --SetDockType true --height 22"
        xmonad $ myConfig dzen

    {-
     - SearchMap
     -}

    mySearchMap method = M.fromList $
            [ ((0, xK_g), method google)
            , ((0, xK_w), method wikipedia)
            , ((0, xK_h), method hoogle)
            , ((shiftMask, xK_h), method hackage)
            , ((0, xK_s), method scholar)
            , ((0, xK_m), method maps)
            , ((0, xK_a), method alpha)
            , ((0, xK_d), method $ searchEngine "Dict" "http://translate.google.com/#en|zh-CN|")
            ]

    myPromptSearch (SearchEngine _ site)
      = inputPrompt myXPConfig "Search" ?+ \s ->
          (search "firefox" site s >> viewWeb)

    mySelectSearch eng = selectSearch eng >> viewWeb

    viewWeb = windows (W.view "web")

    {-
     - Topic
     -}

    data TopicItem = TI { topicName :: Topic
                        , topicDir  :: Dir
                        , topicAction :: X ()
                        , topicIcon :: FilePath
                        }

    myTopicNames :: [Topic]
    myTopicNames = map topicName myTopics

    myTopicConfig :: TopicConfig
    myTopicConfig = TopicConfig
        { topicDirs = M.fromList $ map (\(TI n d _ _) -> (n,d)) myTopics
        , defaultTopicAction = const (return ())
        , defaultTopic = "web"
        , maxTopicHistory = 10
        , topicActions = M.fromList $ map (\(TI n _ a _) -> (n,a)) myTopics
        }

    myIcons = M.fromList $ map (\(TI n _ _ i) -> (n,i)) myTopics

    myTopics :: [TopicItem]
    myTopics =
        [ TI "web" "" (spawn "firefox") "firefox.xpm"
        , TI "code" "" (spawn "gvim") "gvim.xpm"
        , TI "term" "" (spawn "xterm -T screen -e 'screen -d -R'") "xterm.xpm"
        , TI "doc" "Documents/" (spawn "evince") "evince.xpm"
        , TI "office" "Documents/" (return ()) "libreoffice34-base.xpm"
        , TI "irc" "" (spawn "xterm -T irssi -e irssi") "irssi.xpm"
        , TI "mail" "" (spawn "xterm -T mutt -e mutt") "thunderbird.xpm"
        , TI "dict" "" (spawn "goldendict") "goldendict.xpm"
        , TI "media" "" (return ()) "imagemagick.xpm"
        , TI "emacs" "" (spawn "emacsclient -c -n") "emacs.xpm"
        , TI "net" "" (return ()) "gtk-network.xpm"
        ]
